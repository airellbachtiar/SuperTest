// ---------------------------------------------------------------------- 
// GENERATED FILE 
// All code in this file is generated by the SuperModels workbench 
// (version 5.0.0.1292). Any changes made to this file may lead to 
// incorrect behaviour and will be lost if the code is generated again. 
// Modify the model instead. 
// 
// Copyright : Sioux Technologies 
// Model     : Traffic.sms (Traffic) 
// Generator : C# state machine generator (Decomp1) 
// Source    : TrafficDomainModel.HMI 
// ---------------------------------------------------------------------- 

// ReSharper disable IdentifierTypo
// ReSharper disable CheckNamespace
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantUsingDirective
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable once ClassNeverInstantiated.Global

#pragma warning disable CS8618

using System;
using System.Collections.Generic;
using InterfaceServices.Model;
using StatemachineFramework.Components;
using StatemachineFramework.Statemachines;
using StatemachineFramework.Statemachines.Builder;
using ExtensionMethods;
using HalFramework.Interfaces.Reference;
using HalFramework.Interfaces.Reference.Common;
using Traffic.Generated.Interfaces;

namespace Traffic.Generated.HMI;

public partial class HMI : Component
{
    private readonly Func<HMIContext> _contextFactory = Activator.CreateInstance<HMIContext>;
    public HMIContext Context { get; private set; }

    public override string Name => "HMI";
    public override IList<Statemachine> Statemachines { get; } = new List<Statemachine>();
    public override ushort TypeId => 22;

    #region Providing interfaces

    // No providing interfaces

    #endregion

    #region Requiring interfaces

    public Port<StartStop> I1Client => Context.I1Client;

    #endregion

    public override void Build()
    {
        Context = _contextFactory.Invoke();
        Context.I1Client = new Port<StartStop>(InBuffer, "mp29", new EventSource(TypeId, InstanceId));

        Context.I1Client.UsedEvents = Array.Empty<int>();


        Statemachines.ForEach(statemachine => statemachine.Build(new BuildInput(Name, this)));
    }
}
