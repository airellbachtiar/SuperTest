// ---------------------------------------------------------------------- 
// GENERATED FILE 
// All code in this file is generated by the SuperModels workbench 
// (version 5.0.0.1292). Any changes made to this file may lead to 
// incorrect behaviour and will be lost if the code is generated again. 
// Modify the model instead. 
// 
// Copyright : Sioux Technologies 
// Model     : Traffic.sms (Traffic) 
// Generator : C# state machine generator (Decomp1) 
// Source    : Decomp1.Controller.States1.Operational 
// ---------------------------------------------------------------------- 

// ReSharper disable IdentifierTypo
// ReSharper disable CheckNamespace
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantUsingDirective
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable once ClassNeverInstantiated.Global

using InterfaceServices.Model;
using StatemachineFramework.Statemachines;
using StatemachineFramework.Statemachines.Builder;
using HalFramework.Interfaces.Reference;

namespace Traffic.Generated.Controller;

public class States1Operational : Statemachine
{
    public States1Operational(ControllerContext context, EventBuffer inBuffer)
    {
        Name = "States";

        // Sub statemachines
        var States1OperationalPedWalkBlinkingStates = new States1OperationalPedWalkBlinkingStates(context, inBuffer);

        // States
        var initial2 = new StateBuilder(StateId.state_initial2_3, StateBuilder.CreationType.Initial)
            .Name("Initial2")
            .Build();
        var carsDrive = new StateBuilder(StateId.state_carsDrive_4)
            .Name("CarsDrive")
            .OnEntry(context.CarMayDrive)
            .Build();
        var carsShouldStop = new StateBuilder(StateId.state_carsShouldStop_5)
            .Name("CarsShouldStop")
            .OnEntry(context.CarShouldBeStopped)
            .Build();
        var carsStopped = new StateBuilder(StateId.state_carsStopped_6)
            .Name("CarsStopped")
            .OnEntry(context.CarsShouldBesStopped)
            .Build();
        var pedWalk = new StateBuilder(StateId.state_pedWalk_7)
            .Name("PedWalk")
            .OnEntry(context.Walk)
            .SubStatemachine(States1OperationalPedWalkBlinkingStates)
            .Build();
        var pedShouldStop = new StateBuilder(StateId.state_pedShouldStop_11)
            .Name("PedShouldStop")
            .OnEntry(context.__ENTRY_state_pedShouldStop_11)
            .Build();

        States = new List<StatemachineFramework.Statemachines.State>
        {
            initial2,
            carsDrive,
            carsShouldStop,
            carsStopped,
            pedWalk,
            pedShouldStop
        };

        // Transitions
        var t2 = new TransitionBuilder(TransitionId.transition_t2_3)
            .Name("t2")
            .From(StateId.state_initial2_3)
            .To(StateId.state_carsDrive_4)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.CarGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Promise(() => context.CarRed.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarRed.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();
        var t4 = new TransitionBuilder(TransitionId.transition_t4_4)
            .Name("t4")
            .From(StateId.state_carsDrive_4)
            .To(StateId.state_carsShouldStop_5)
            .Guard(context.__GUARD_transition_t4_4)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.CarYellow.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarYellow.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Promise(() => context.CarGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();
        var t5 = new TransitionBuilder(TransitionId.transition_t5_5)
            .Name("t5")
            .From(StateId.state_carsShouldStop_5)
            .To(StateId.state_carsStopped_6)
            .Guard(context.__GUARD_transition_t5_5)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.CarYellow.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarYellow.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Promise(() => context.CarRed.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarRed.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Build();
        var t6 = new TransitionBuilder(TransitionId.transition_t6_6)
            .Name("t6")
            .From(StateId.state_carsStopped_6)
            .To(StateId.state_pedWalk_7)
            .Guard(context.__GUARD_transition_t6_6)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Promise(() => context.PedRed.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedRed.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();
        var t7 = new TransitionBuilder(TransitionId.transition_t7_7)
            .Name("t7")
            .From(StateId.state_pedWalk_7)
            .To(StateId.state_pedShouldStop_11)
            .Guard(context.__GUARD_transition_t7_7)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Promise(() => context.PedRed.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedRed.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Build();
        var t8 = new TransitionBuilder(TransitionId.transition_t8_8)
            .Name("t8")
            .From(StateId.state_pedShouldStop_11)
            .To(StateId.state_carsDrive_4)
            .Guard(context.__GUARD_transition_t8_8)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.CarGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Promise(() => context.CarRed.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.CarRed.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();

        Transitions = new List<StatemachineFramework.Statemachines.Transition>
        {
            t2,
            t4,
            t5,
            t6,
            t7,
            t8
        };

        InitialState = initial2;
    }

    /// <inheritdoc />
    public override string Name { get; }

    /// <inheritdoc />
    public override IList<StatemachineFramework.Statemachines.State> States { get; }

    /// <inheritdoc />
    public override IList<StatemachineFramework.Statemachines.Transition> Transitions { get; }
}
