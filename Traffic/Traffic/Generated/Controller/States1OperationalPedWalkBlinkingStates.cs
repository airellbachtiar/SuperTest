// ---------------------------------------------------------------------- 
// GENERATED FILE 
// All code in this file is generated by the SuperModels workbench 
// (version 5.0.0.1292). Any changes made to this file may lead to 
// incorrect behaviour and will be lost if the code is generated again. 
// Modify the model instead. 
// 
// Copyright : Sioux Technologies 
// Model     : Traffic.sms (Traffic) 
// Generator : C# state machine generator (Decomp1) 
// Source    : Decomp1.Controller.States1.Operational.PedWalk.BlinkingStates 
// ---------------------------------------------------------------------- 

// ReSharper disable IdentifierTypo
// ReSharper disable CheckNamespace
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantUsingDirective
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable once ClassNeverInstantiated.Global

using InterfaceServices.Model;
using StatemachineFramework.Statemachines;
using StatemachineFramework.Statemachines.Builder;
using HalFramework.Interfaces.Reference;

namespace Traffic.Generated.Controller;

public class States1OperationalPedWalkBlinkingStates : Statemachine
{
    public States1OperationalPedWalkBlinkingStates(ControllerContext context, EventBuffer inBuffer)
    {
        Name = "BlinkingStates";

        // States
        var initial3 = new StateBuilder(StateId.state_initial3_8, StateBuilder.CreationType.Initial)
            .Name("Initial3")
            .Build();
        var greenOff = new StateBuilder(StateId.state_greenOff_9)
            .Name("GreenOff")
            .OnEntry(context.__ENTRY_state_greenOff_9)
            .Build();
        var greenOn = new StateBuilder(StateId.state_greenOn_10)
            .Name("GreenOn")
            .OnEntry(context.__ENTRY_state_greenOn_10)
            .Build();

        States = new List<StatemachineFramework.Statemachines.State>
        {
            initial3,
            greenOff,
            greenOn
        };

        // Transitions
        var t9 = new TransitionBuilder(TransitionId.transition_t9_0)
            .Name("t9")
            .From(StateId.state_initial3_8)
            .To(StateId.state_greenOff_9)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();
        var t10 = new TransitionBuilder(TransitionId.transition_t10_1)
            .Name("t10")
            .From(StateId.state_greenOff_9)
            .To(StateId.state_greenOn_10)
            .Guard(context.__GUARD_transition_t10_1)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Build();
        var t11 = new TransitionBuilder(TransitionId.transition_t11_2)
            .Name("t11")
            .From(StateId.state_greenOn_10)
            .To(StateId.state_greenOff_9)
            .Guard(context.__GUARD_transition_t11_2)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();

        Transitions = new List<StatemachineFramework.Statemachines.Transition>
        {
            t9,
            t10,
            t11
        };

        InitialState = initial3;
    }

    /// <inheritdoc />
    public override string Name { get; }

    /// <inheritdoc />
    public override IList<StatemachineFramework.Statemachines.State> States { get; }

    /// <inheritdoc />
    public override IList<StatemachineFramework.Statemachines.Transition> Transitions { get; }
}
