// ---------------------------------------------------------------------- 
// GENERATED FILE 
// All code in this file is generated by the SuperModels workbench 
// (version 5.0.0.1292). Any changes made to this file may lead to 
// incorrect behaviour and will be lost if the code is generated again. 
// Modify the model instead. 
// 
// Copyright : Sioux Technologies 
// Model     : Traffic.sms (Traffic) 
// Generator : C# state machine generator (Decomp1) 
// Source    : TrafficDomainModel.Controller.TrafficStates.Operational.PedestrianGreenLightFlicker.BlinkingStates.PedestrianFlickering 
// ---------------------------------------------------------------------- 

// ReSharper disable IdentifierTypo
// ReSharper disable CheckNamespace
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantUsingDirective
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ClassWithVirtualMembersNeverInherited.Global
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable once ClassNeverInstantiated.Global

using System.Collections.Generic;
using InterfaceServices.Model;
using StatemachineFramework.Statemachines;
using StatemachineFramework.Statemachines.Builder;
using ExtensionMethods;
using Traffic.Generated.Interfaces;
using HalFramework.Interfaces.Reference;
using HalFramework.Interfaces.Reference.Common;

namespace Traffic.Generated.Controller;

public class TrafficStatesOperationalPedestrianGreenLightFlickerBlinkingStatesPedestrianFlickering : Statemachine
{
    public TrafficStatesOperationalPedestrianGreenLightFlickerBlinkingStatesPedestrianFlickering(ControllerContext context, EventBuffer inBuffer)
    {
        Name = "States";

        // States
        var initial4 = new StateBuilder(StateId.state_initial4_13, StateBuilder.CreationType.Initial)
            .Name("Initial4")
            .Build();
        var greenOff = new StateBuilder(StateId.state_greenOff_14)
            .Name("GreenOff")
            .Build();
        var greenOn = new StateBuilder(StateId.state_greenOn_15)
            .Name("GreenOn")
            .OnEntry(context.__ENTRY_state_greenOn_15)
            .OnExit(context.__EXIT_state_greenOn_15)
            .Build();

        States = new List<StatemachineFramework.Statemachines.State>
        {
            initial4,
            greenOff,
            greenOn
        };

        // Transitions
        var t10 = new TransitionBuilder(TransitionId.transition_t10_3)
            .Name("t10")
            .From(StateId.state_greenOff_14)
            .To(StateId.state_greenOn_15)
            .Guard(context.__GUARD_transition_t10_3)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Open)))
            .Build();
        var t11 = new TransitionBuilder(TransitionId.transition_t11_4)
            .Name("t11")
            .From(StateId.state_greenOn_15)
            .To(StateId.state_greenOff_14)
            .Guard(context.__GUARD_transition_t11_4)
            .Guard(_ => !inBuffer.ContainsIncoming("p", typeof(NormallyClosedValveItf.Events)))
            .Promise(() => context.PedGreen.Impl.Provider.EventBuffer.Promise(new InterfaceServices.Model.EventId(context.PedGreen.Impl.Provider.PortName, NormallyClosedValveItf.Events.Close)))
            .Build();
        var t13 = new TransitionBuilder(TransitionId.transition_t13_5)
            .Name("t13")
            .From(StateId.state_initial4_13)
            .To(StateId.state_greenOff_14)
            .Build();

        Transitions = new List<StatemachineFramework.Statemachines.Transition>
        {
            t10,
            t11,
            t13
        };

        InitialState = initial4;
    }

    /// <inheritdoc />
    public override string Name { get; }

    /// <inheritdoc />
    public override IList<StatemachineFramework.Statemachines.State> States { get; }

    /// <inheritdoc />
    public override IList<StatemachineFramework.Statemachines.Transition> Transitions { get; }
}
