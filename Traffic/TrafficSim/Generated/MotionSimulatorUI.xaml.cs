// ReSharper disable IdentifierTypo
// ReSharper disable CheckNamespace
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable CollectionNeverUpdated.Local
// ReSharper disable InconsistentNaming

// ---------------------------------------------------------------------- 
// GENERATED FILE 
// All code in this file is generated by the SuperModels workbench 
// (version 5.0.0.1292). Any changes made to this file may lead to 
// incorrect behaviour and will be lost if the code is generated again. 
// Modify the model instead. 
// 
// Copyright : Sioux Technologies 
// Model     : Traffic.sms (Traffic) 
// Generator : Motion simulator (MotionSystem) 
// Source    : MotionSystem 
// ---------------------------------------------------------------------- 

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using SimulatorsBase.Views;

namespace Generated;

public partial class MotionSimulatorUI : IUpdateSimView, INotifyPropertyChanged
{
    public event EventHandler SelectedChanged;

    public MotionSimulatorUI()
    {
        InitializeComponent();
        PreviewMouseLeftButtonDown += MotionSimulatorView_PreviewMouseLeftButtonDown;
    }

    public void SetupBinding()
    {
        foreach (var canvasChild in TheCanvas.Children)
        {
            if (canvasChild is IUpdateSimView simView)
            {
                simView.SetupBinding();
            }
        }
    }

    public void Update()
    {
        foreach (var canvasChild in TheCanvas.Children)
        {
            if (canvasChild is IUpdateSimView simView)
            {
                simView.Update();
            }
        }
    }

    private void MotionSimulatorView_PreviewMouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
    {
        foreach (var c in TheCanvas.Children)
        {
            if (((UIElement)c).IsMouseOver && SelectedChanged != null)
            {
                try
                {
                    SelectedChanged(c, EventArgs.Empty);
                }
                catch
                {
                    // ignored
                }
            }
        }
    }

    private void SliderDblClick(object sender, MouseButtonEventArgs e)
    {
        if (DataContext is MotionSimulator sim)
            sim.ResetZoom();
    }

    #region INotifyPropertyChanged

    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    #endregion
}
