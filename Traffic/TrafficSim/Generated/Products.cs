// ReSharper disable IdentifierTypo
// ReSharper disable CheckNamespace
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable CollectionNeverUpdated.Local
// ReSharper disable InconsistentNaming

// ---------------------------------------------------------------------- 
// GENERATED FILE 
// All code in this file is generated by the SuperModels workbench 
// (version 5.0.0.1292). Any changes made to this file may lead to 
// incorrect behaviour and will be lost if the code is generated again. 
// Modify the model instead. 
// 
// Copyright : Sioux Technologies 
// Model     : Traffic.sms (Traffic) 
// Generator : Motion simulator (MotionSystem) 
// Source    : MotionSystem 
// ---------------------------------------------------------------------- 

using System.Collections;
using System.Collections.Generic;
using HolodeckGrpcServer.Interfaces;
using MotionSimComponents;
using System;

namespace Generated;

public partial class Products : IHoloProducts
{
    public event Action<IHoloProduct>? ProductAdded;
    public event Action<IHoloProduct>? ProductRemoved;

    private readonly List<IHoloProduct> _products = new();

    private uint _nextProductId;
    private List<IHoloElement>? _elements;

    public void Initialize(List<IHoloElement> elements)
    {
        uint maxIdSoFar = 0;
        foreach (var element in elements)
        {
            maxIdSoFar = Math.Max(maxIdSoFar, element.Id);
        }
        _nextProductId = maxIdSoFar + 1;
        _elements = elements;
    }

    public IEnumerator<IHoloProduct> GetEnumerator()
    {
        return _products.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public IHoloProduct Add(string name, string typeName, string slotName)
    {
        var id = _nextProductId++;
        var product = new Product(id, name, typeName, slotName);
        _products.Add(product);
        _elements?.Add(product);
        ProductAdded?.Invoke(product);
        return product;
    }

    public void Remove(IHoloProduct product)
    {
        _products.Remove(product);
        _elements?.Remove(product as IHoloElement);
        ProductRemoved?.Invoke(product);
    }
}
