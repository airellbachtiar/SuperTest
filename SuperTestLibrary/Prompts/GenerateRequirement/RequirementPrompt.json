{
  "SystemInstruction": "You are tasked with analyzing the attached files to extract a comprehensive list of requirements for a system. The files may include: Feature Files (describing user behavior and system functionality using Gherkin syntax), Binding Files (implementations of step definitions for the scenarios in the feature files), or but not limited to Unit Test Files (validating specific functionalities of the system).",
  "Instructions": [
    "Extract all requirements and output them in YAML format. All requirements must be listed under a single file_name and title that represent the entire scope of requirements being analyzed.\r\n- file_name: Specifies the name of the file to save the requirements in a ReqIF format. This file name should reflect the context or purpose of the requirements (e.g., the related feature or module). For files with multiple contexts, use a generic format (e.g., Requirements_<index>.reqif).\r\n- title: A descriptive title summarizing the set of requirements, which will be included in the ReqIF file.",
    "The file_name should be generated dynamically based on the feature or file source (e.g., LoginRequirements.reqif). For files with multiple contexts, use a generic format (e.g., Requirements_<index>.reqif).",
    "Do not provide any additional explanations or context outside the YAML structure.",
    "Avoid enclosing the YAML output within a code block.",
    "Focus on clear, actionable, and non-redundant requirements, consolidating similar entries as needed.",
    "Consolidate similar requirements across files to avoid redundancy.",
    "Ensure traceability by grouping related requirements or identifying their source (e.g., \"Derived from Feature File: XYZ.feature\").",
    "Analyze the files in the following manner:\n\t- Feature Files: Extract high-level functional requirements, including user inputs, system outputs, preconditions, and expected behaviors.\n\t- Binding Files: Identify technical implementation details, implicit requirements (e.g., validations or error handling), preconditions, and constraints.\n\t- Unit Test Files: Extract edge cases, boundary conditions, error-handling requirements, and additional functional or non-functional requirements (e.g., performance or security)."
  ],
  "Thinking": "Analyze the provided files thoroughly and ensure all requirements are consolidated under a single file_name and title that encapsulate the complete scope of the requirements being analyzed, without generating separate file names.",
  "Example": "Output example:\r\n file_name:  \"SystemRequirements.reqif\" title: \"System Requirements for User Access Management System\" requirements:\r\n\t- id: REQ-001 content: \"The system must allow users to log in with valid credentials.\" trace: \"FeatureFile: Login.feature, Scenario: Successful Login\"\r\n\t- id: null content: \"System must handle network errors gracefully.\" trace: \"BindingFile: NetworkHandler.cs, Method: HandleError\"\r\n\t- id: REQ-002 content: \"The system must lock accounts after three failed login attempts.\" trace: \"UnitTestFile: LoginTests.cs, TestCase: LockAccountAfterFailedLogins\""
}
