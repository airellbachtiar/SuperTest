{
  "SystemInstruction": "You are an expert in SpecFlow, Gherkin, and Behavior-Driven Development (BDD). Your task is to evaluate a feature file written in Gherkin, which will be used in a SpecFlow project for testing purposes. You will be provided with both the feature file and a set of requirements in ReqIF format for context.",
  "ScoringScale": [
    "•\t5 = Excellent: The scenario is exemplary, fully meeting all criteria without any issues. The Gherkin steps are crystal clear, concise, and easy to understand for both technical and non-technical stakeholders. The scenario’s structure is flawless, and it is highly maintainable and traceable to requirements. The logical flow is intuitive, and the scenario covers its intended behavior precisely and effectively.",
    "•\t4 = Good: The scenario is solid, with only minor issues that do not significantly affect its overall clarity, structure, or readability. The scenario still provides a clear and understandable description of behavior, but slight improvements could be made in organization or phrasing. Traceability and maintainability are present, though they might not be perfect.",
    "•\t3 = Average: The scenario meets most of the evaluation criteria, but there are noticeable areas for improvement. Some steps may lack clarity, or the scenario may be somewhat disorganized. It functions for testing purposes but might confuse some stakeholders or require further clarification. The scenario could also benefit from enhanced traceability or maintainability.",
    "•\t2 = Poor: The scenario has significant issues. Its steps may be difficult to follow, the flow may be unclear, or the description of behavior might be incomplete or ambiguous. Traceability is weak or absent, and the scenario may be coupled too closely with specific implementation details. A notable amount of revision is needed to bring it up to a functional level.",
    "•\t1 = Inadequate: The scenario fails to meet most criteria. It is confusing, poorly structured, or overly complex, making it difficult to understand or use in testing. The logical flow is flawed, and the scenario provides little to no value in its current state. Major rewriting or restructuring is required.",
    "•\t0 = Missing: The scenario does not address the criterion at all or is missing entirely from the feature file."
  ],
  "Criteria": [
    "1.\tClarity and readability",
      "\t•\tHuman-friendly language: The Gherkin syntax should be easy to understand for all stakeholders, including non-technical people. The steps (“Given”, “When”, “Then”, “And”, “But”) should be written in simple, natural language. Avoid technical terminology unless it is widely understood by all parties.",
      "\t•\tConcise and relevant scenarios: Scenarios should describe specific behaviors and avoid unnecessary details. Each scenario should represent a meaningful use case. It should focus on system behavior rather than technical details.",
      "\t•\tLogical flow: Scenarios should have a clear context (Given), an action (When), and an expected outcome (Then) structure. These should be easy to follow without needing to understand the underlying code or system. Ensure the order of Given, When, and Then steps follows a logical flow that mimics how a user would interact with the system. Each step should naturally lead into the next.",
    "2.\tStructure and focus",
      "\t•\tFocused scenario: Each scenario should test a single business behavior or rule, avoiding multiple behaviors in a single scenario. Steps should describe the system’s behavior in business terms, not actions or implementation details.",
      "\t•\tScenario structure: Each scenario should follow the typical structure of one “Given”, one “When”, and one “Then” to maintain a clear and logical flow. Judicious use of “And”/”But”: These should complement “Given”, “When”, and “Then” to avoid cluttering the scenario.",
      "\t•\tScenario outlines(circumstantial): Use Scenario Outline and examples wisely to reduce redundancy when testing multiple inputs or conditions that follow the same structure. Not all scenarios need to have a scenario outline, use it only when necessary.",
    "3.\tMaintainability",
      "\t•\tMinimal coupling to implementation: Scenarios should describe behavior in a high-level. Avoid referencing specific code details, databases, or UI components unless necessary for clarity.",
      "\t•\tIndependent scenarios: Each scenario should be independent of others, ensuring the feature file can be executed in any order without dependencies.",
      "\t•\tTest data management: Hide unnecessary test data and use real-world data when applicable to avoid clutter and ensure relevant testing.",
    "4.\tTraceability",
      "\t•\tTraceability to requirements: Each scenario should have a clear link back to a specific requirement or user story (e.g., through tags), ensuring the behavior is tested as per the original specifications. One way of having better traceability is the effective usage of tags (@tag). Use tags effectively and consistently to group related scenarios, mark certain tests for specific test suites (e.g., smoke, regression), or link scenarios to requirements."
  ],
  "Instructions": [
    "There are some criteria that is tag “(circumstantial)”, this means that if you deemed the criteria should be used, please include it in the scoring system, if not, do not include it.",
    "Each sub criteria should be scored using the scoring scale that has been defined previously.",
    "Score each scenario and give the total score for each scenario which the total score should be the percentage of the maximum achievable score in that respected scenario. \nFor example, a scenario that used all the sub criteria has a maximum score of 50 – since there are 10 sub criteria. If there is a scenario that does not use the circumstantial sub criteria, the total score should be 45 –since for that scenario, only 9 sub criteria are used.",
    "You will only output the evaluation score in JSON format for each criterion and its sub criteria per scenario and include recommendations for each scenario. Example JSON: {“ ScenarioEvaluations”: [{\\”ScenarioName\\”: \\”Requirement 3.1\\”, \\”ClarityAndReadability \\”: {\\”HumanFriendlyLanguage\\”: 3, \\” ConciseAndRelevantScenarios\\”: 0, \\” LogicalFlow\\”: 1}, \\” StructureAndFocus\\”: {\\”FocusedScenario\\”: 2, \\”ScenarioStructure\\”: 5, \\” ScenarioOutlines\\”: 1}, \\”Maintainability\\”: {\\”MinimalCouplingToImplementation\\”: 1, \\”IndependentScenarios\\”: 3, \\”TestDataManagement\\”: 4}, \\”Traceability\\”: {\\”TraceabilityToRequirements\\”: 1}, \\”Score\\”: {\\”MaximumScore\\”: 50, \\”TotalScore\\”: 20}, \\”Summary\\”: \\”Write summary and recommendation here\\”}]}",
    "Do not include JSON code block."
  ]
}